%{ /* BLURB gpl

                           Coda File System
                              Release 6

          Copyright (c) 1987-2003 Carnegie Mellon University
                  Additional copyrights listed below

This  code  is  distributed "AS IS" without warranty of any kind under
the terms of the GNU General Public Licence Version 2, as shown in the
file  LICENSE.  The  technical and financial  contributors to Coda are
listed in the file CREDITS.

                        Additional copyrights
                           none currently

#*/
%}

/************************************************************************/
/*									*/
/*  mond.rpc2	- mond interface description				*/
/*									*/
/*  Function	- A set of routines to handle Venus & Server monitoring	*/
/*		  and reporting functions.				*/
/*									*/
/************************************************************************/

Subsystem "mond" 1 1;

#define	MondSubsysId	171717


#include "vcrcommon.rpc2"

#define	nVSEs		64
#define	VSE_VGET	0
#define	VSE_OPEN	1
#define	VSE_CLOSE	2
#define	VSE_RDWR	3
#define	VSE_GETATTR	4
#define	VSE_SETATTR	5
#define	VSE_ACCESS	6
#define	VSE_LOOKUP	7
#define	VSE_CREATE	8
#define	VSE_REMOVE	9
#define	VSE_LINK	10
#define	VSE_RENAME	11
#define	VSE_MKDIR	12
#define	VSE_RMDIR	13
#define	VSE_READDIR	14
#define	VSE_SYMLINK	15
#define	VSE_READLINK	16
#define	VSE_FSYNC	17


typedef RPC2_Struct
{
	RPC2_Unsigned	IPAddress;
	RPC2_Unsigned	BirthTime;
}	MondVenusId;

typedef RPC2_Unsigned	MondSessionId;

typedef RPC2_Struct
{
	RPC2_Unsigned	Member0;
	RPC2_Unsigned	Member1;
	RPC2_Unsigned	Member2;
	RPC2_Unsigned	Member3;
	RPC2_Unsigned	Member4;
	RPC2_Unsigned	Member5;
	RPC2_Unsigned	Member6;
	RPC2_Unsigned	Member7;
}	MondAVSG;

typedef RPC2_Struct
{
	RPC2_Integer		Opcode;
	RPC2_Integer		SuccessCount;
	RPC2_Unsigned		SigmaT;
	RPC2_Unsigned		SigmaTSquared;
	RPC2_Integer		FailureCount;
}	MondSessionEvent;

typedef RPC2_Struct
{
	MondSessionEvent	Event0;
	MondSessionEvent	Event1;
	MondSessionEvent	Event2;
	MondSessionEvent	Event3;
	MondSessionEvent	Event4;
	MondSessionEvent	Event5;
	MondSessionEvent	Event6;
	MondSessionEvent	Event7;
	MondSessionEvent	Event8;
	MondSessionEvent	Event9;
	MondSessionEvent	Event10;
	MondSessionEvent	Event11;
	MondSessionEvent	Event12;
	MondSessionEvent	Event13;
	MondSessionEvent	Event14;
	MondSessionEvent	Event15;
	MondSessionEvent	Event16;
	MondSessionEvent	Event17;
	MondSessionEvent	Event18;
	MondSessionEvent	Event19;
	MondSessionEvent	Event20;
	MondSessionEvent	Event21;
	MondSessionEvent	Event22;
	MondSessionEvent	Event23;
	MondSessionEvent	Event24;
	MondSessionEvent	Event25;
	MondSessionEvent	Event26;
	MondSessionEvent	Event27;
	MondSessionEvent	Event28;
	MondSessionEvent	Event29;
	MondSessionEvent	Event30;
	MondSessionEvent	Event31;
	MondSessionEvent	Event32;
	MondSessionEvent	Event33;
	MondSessionEvent	Event34;
	MondSessionEvent	Event35;
	MondSessionEvent	Event36;
	MondSessionEvent	Event37;
	MondSessionEvent	Event38;
	MondSessionEvent	Event39;
	MondSessionEvent	Event40;
	MondSessionEvent	Event41;
	MondSessionEvent	Event42;
	MondSessionEvent	Event43;
	MondSessionEvent	Event44;
	MondSessionEvent	Event45;
	MondSessionEvent	Event46;
	MondSessionEvent	Event47;
	MondSessionEvent	Event48;
	MondSessionEvent	Event49;
	MondSessionEvent	Event50;
	MondSessionEvent	Event51;
	MondSessionEvent	Event52;
	MondSessionEvent	Event53;
	MondSessionEvent	Event54;
	MondSessionEvent	Event55;
	MondSessionEvent	Event56;
	MondSessionEvent	Event57;
	MondSessionEvent	Event58;
	MondSessionEvent	Event59;
	MondSessionEvent	Event60;
	MondSessionEvent	Event61;
	MondSessionEvent	Event62;
	MondSessionEvent	Event63;
}	MondSessionEventArray;

typedef	RPC2_Enum
{
	ServerDown	= 0,
	ServerUp	= 1
}	MondCommEventType;

typedef RPC2_Enum
{
	MondSession	= 0,
	MondCommEvent	= 1,
	MondOverflow	= 2
}	MondRecordType;



typedef RPC2_Struct
{
	RPC2_Unsigned	IPAddress;
	RPC2_Unsigned	BirthTime;
}	SmonViceId;


typedef RPC2_Struct
{
	RPC2_Integer	SystemCPU;
	RPC2_Integer	UserCPU;
	RPC2_Integer	IdleCPU;
	RPC2_Unsigned	BootTime;
	RPC2_Integer	TotalIO;
}	SmonStatistics;

typedef RPC2_Struct
{
	RPC2_Integer	alloccount;
	RPC2_Integer	dealloccount;
}	ResOpEntry;

typedef RPC2_Struct
{
	RPC2_String	name;
	RPC2_Integer	countent;
	RPC2_Integer	countexit;
	RPC2_Integer	tsec;
	RPC2_Integer	tusec;
	RPC2_Integer 	counttime;
	RPC2_Integer	counthost;
}       ResMultiEntry;

MondReportSession	(IN MondVenusId Venus,
			 IN MondSessionId Session,
			 IN VolumeId Volume,
			 IN UserId User,
			 IN MondAVSG AVSG,
			 IN RPC2_Unsigned StartTime,
			 IN RPC2_Unsigned EndTime,
			 IN MondSessionEventArray Events);

MondReportCommEvent	(IN MondVenusId Venus,
			 IN RPC2_Unsigned ServerIPAddress,
			 IN RPC2_Unsigned Time,
			 IN MondCommEventType Type);

MondReportOverflow	(IN MondVenusId Venus,
			 IN RPC2_Unsigned StartTime,
			 IN RPC2_Unsigned EndTime,
			 IN RPC2_Integer Count);


SmonReportCallEvent(IN SmonViceId Vice, IN RPC2_Unsigned Time,
		IN CallCountEntry CBCount[],
		IN CallCountEntry ResCount[],
		IN CallCountEntry SmonCount[],
		IN CallCountEntry VolDCount[],
		IN ResMultiEntry MultiCount[],
	        IN SmonStatistics Stats);

SmonReportResEvent(IN SmonViceId Vice, IN RPC2_Unsigned Time,
		IN VolumeId Volid,
		IN RPC2_Integer HighWaterMark,
		IN RPC2_Integer AllocNumber,
		IN RPC2_Integer DeallocNumber,
		IN ResOpEntry ResOp[]);

SmonReportOverflow(IN SmonViceId Vice, IN RPC2_Unsigned Time,
		IN RPC2_Unsigned StartTime,
		IN RPC2_Unsigned EndTime,
		IN RPC2_Integer Count);


