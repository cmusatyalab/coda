%{ /* BLURB lgpl

                           Coda File System
                              Release 6

          Copyright (c) 1987-2003 Carnegie Mellon University
                  Additional copyrights listed below

This  code  is  distributed "AS IS" without warranty of any kind under
the  terms of the  GNU  Library General Public Licence  Version 2,  as
shown in the file LICENSE. The technical and financial contributors to
Coda are listed in the file CREDITS.

                        Additional copyrights
              Copyright (c) 2002-2003 Intel Corporation
#*/

/*
                         IBM COPYRIGHT NOTICE

                          Copyright (C) 1986
             International Business Machines Corporation
                         All Rights Reserved

This  file  contains  some  code identical to or derived from the 1986
version of the Andrew File System ("AFS"), which is owned by  the  IBM
Corporation.   This  code is provided "AS IS" and IBM does not warrant
that it is free of infringement of  any  intellectual  rights  of  any
third  party.    IBM  disclaims  liability of any kind for any damages
whatsoever resulting directly or indirectly from use of this  software
or  of  any  derivative work.  Carnegie Mellon University has obtained
permission to  modify,  distribute and sublicense this code,  which is
based on Version 2  of  AFS  and  does  not  contain  the features and
enhancements that are part of  Version 3 of  AFS.  Version 3 of AFS is
commercially   available   and  supported  by   Transarc  Corporation,
Pittsburgh, PA.

*/
%}

server prefix "FS";
Subsystem "srv" 1 1;

#define SUBSYS_SRV 1001

%{
extern char *ViceErrorMsg(int errorCode);
%}

/* please increment this number if you make an incompatible change! */
#define VICE_VERSION 3

#include "vcrcommon.rpc2"

#define	SET_TIME 	1
#define SET_MODE	2
#define	SET_OWNER	4
#define SET_LENGTH	8

typedef RPC2_Enum
{
	ReadOnly = 0,
	ReadWrite = 1,
	Backup = 2,
	Replicated = 3
}	ViceVolumeType;

typedef RPC2_Byte	DiskName[V_MAXPARTNAMELEN];

typedef RPC2_Struct 
{
	RPC2_Integer	BlocksAvailable;
	RPC2_Integer	TotalBlocks;
	DiskName	Name;
}	ViceDisk;

typedef RPC2_Struct
{
	RPC2_Unsigned	Obsolete1;
	RPC2_Unsigned	Obsolete2;
	RPC2_Unsigned	CurrentTime;
	RPC2_Unsigned	BootTime;
	RPC2_Unsigned	StartTime;
	RPC2_Unsigned	CurrentConnections;
	RPC2_Unsigned	TotalViceCalls;
	RPC2_Unsigned	TotalFetches;
	RPC2_Unsigned	FetchDatas;
	RPC2_Unsigned	FetchedBytes;
	RPC2_Unsigned	FetchDataRate;
	RPC2_Unsigned	TotalStores;
	RPC2_Unsigned	StoreDatas;
	RPC2_Unsigned	StoredBytes;
	RPC2_Unsigned	StoreDataRate;
	RPC2_Unsigned	TotalRPCBytesSent;
	RPC2_Unsigned	TotalRPCBytesReceived;
	RPC2_Unsigned	TotalRPCPacketsSent;
	RPC2_Unsigned	TotalRPCPacketsReceived;
	RPC2_Unsigned	TotalRPCPacketsLost;
	RPC2_Unsigned	TotalRPCBogusPackets;
	RPC2_Unsigned	SystemCPU;
	RPC2_Unsigned	UserCPU;
	RPC2_Unsigned	NiceCPU;
	RPC2_Unsigned	IdleCPU;
	RPC2_Unsigned	TotalIO;
	RPC2_Unsigned	ActiveVM;
	RPC2_Unsigned	TotalVM;
	RPC2_Unsigned	EtherNetTotalErrors;
	RPC2_Unsigned	EtherNetTotalWrites;
	RPC2_Unsigned	EtherNetTotalInterupts;
	RPC2_Unsigned	EtherNetGoodReads;
	RPC2_Unsigned	EtherNetTotalBytesWritten;
	RPC2_Unsigned	EtherNetTotalBytesRead;
	RPC2_Unsigned	ProcessSize;
	RPC2_Unsigned	WorkStations;
	RPC2_Unsigned	ActiveWorkStations;
	RPC2_Unsigned	MinFlt;
	RPC2_Unsigned	MajFlt;
	RPC2_Unsigned	NSwaps;
	RPC2_Unsigned	Spare4;
	RPC2_Unsigned	UsrTime;
	RPC2_Unsigned	SysTime;
	RPC2_Unsigned	VmRSS;
	RPC2_Unsigned	VmData;
	ViceDisk	Disk1;
	ViceDisk	Disk2;
	ViceDisk	Disk3;
	ViceDisk	Disk4;
	ViceDisk	Disk5;
	ViceDisk	Disk6;
	ViceDisk	Disk7;
	ViceDisk	Disk8;
	ViceDisk	Disk9;
	ViceDisk	Disk10;
}	ViceStatistics;

typedef RPC2_Struct
{
	VolumeId	Vid;
	VolumeId	ParentId;
	RPC2_Byte	Online;
	RPC2_Byte	InService;
	RPC2_Byte	Blessed;
	RPC2_Byte	NeedsSalvage;
	ViceVolumeType	Type;
	RPC2_Integer	MinQuota;
	RPC2_Integer	MaxQuota;
	RPC2_Integer	BlocksInUse;
	RPC2_Integer	PartBlocksAvail;
	RPC2_Integer	PartMaxBlocks;
	RPC2_Integer	Unused;
}	VolumeStatus;

typedef RPC2_Struct
{
	VolumeId	Volume0;
	VolumeId	Volume1;
	VolumeId	Volume2;
	VolumeId	Volume3;
	VolumeId	Volume4;
	VolumeId	Volume5;
	VolumeId	Volume6;
	VolumeId	Volume7;
}	ViceRepVolMap;

typedef RPC2_Struct
{
	VolumeId	Vid;
	RPC2_Integer	Type;
	VolumeId	Type0;
	VolumeId	Type1;
	VolumeId	Type2;
	VolumeId	Type3;
	VolumeId	Type4;
	RPC2_Unsigned	ServerCount;
	RPC2_Unsigned	Server0;
	RPC2_Unsigned	Server1;
	RPC2_Unsigned	Server2;
	RPC2_Unsigned	Server3;
	RPC2_Unsigned	Server4;
	RPC2_Unsigned	Server5;
	RPC2_Unsigned	Server6;
	RPC2_Unsigned	Server7;
	RPC2_Unsigned	VSGAddr;
	ViceRepVolMap	RepVolMap;
}	VolumeInfo;

typedef	RPC2_Enum
{
	LockRead = 0,
	LockWrite = 1
}	ViceLockType;

typedef RPC2_Enum
{
	NoSalvage = 0,
	Salvage = 1
}	ViceOfflineType;

typedef RPC2_Struct
{
	VnodeId Vnode;
	Unique_t Unique;
	RPC2_Integer Stride;
	RPC2_Integer Count;
}	ViceFidRange;

typedef RPC2_Struct
{
	ViceFid Fid;
	ViceVersionVector VV;
}	ViceFidAndVV;

typedef RPC2_Byte ViceUUID[16];

typedef RPC2_Struct
{
	RPC2_String UserName;
	RPC2_String WorkStationName;
	RPC2_String VenusName;
	ViceUUID    VenusUUID;
}	ViceClient;

/* needed to use arrays. */
typedef RPC2_Struct
{
	VolumeId Vid;
} 	ViceVolumeIdStruct;

typedef RPC2_Struct
{
	RPC2_Integer BirthTime;
	RPC2_Integer Device;
	RPC2_Integer Inode;
}	ViceReintHandle;


ViceNewConnection (IN RPC2_Integer SideEffectType,
		   IN RPC2_Integer SecurityLevel,
		   IN RPC2_Integer EncryptionType,
   		   IN RPC2_Integer AuthType,
		   IN RPC2_CountedBS ClientIdent)
		   NEW_CONNECTION;

/* Replace ViceGetAttr() by ViceGetAttrPlusSHA() at the
   earliest opportunity.  Call below (opcode 1) should 
   be removed permanently.  No need to change ViceFetch() 
   (opcode 3) --- since Venus is getting the entire file,
   it can compute the SHA itself.  (Satya 12/02) */

1: ViceGetAttr	(IN ViceFid Fid,
		 IN RPC2_Unsigned InconOK,
		 OUT ViceStatus Status,
		 IN RPC2_Unsigned PrimaryHost,
		 IN RPC2_CountedBS PiggyCOP2);

2: ViceGetACL	(IN ViceFid Fid,
		 IN RPC2_Unsigned InconOK,
		 IN OUT RPC2_BoundedBS AccessList,
		 OUT ViceStatus Status,
		 IN RPC2_Unsigned PrimaryHost,
		 IN RPC2_CountedBS PiggyCOP2);

3: ViceFetch	(IN ViceFid Fid,
		 IN ViceVersionVector VV,
		 IN RPC2_Unsigned InconOK,
		 OUT ViceStatus Status,
		 IN RPC2_Unsigned PrimaryHost,
		 IN RPC2_Unsigned Offset,
		 IN RPC2_CountedBS PiggyCOP2,
		 IN OUT SE_Descriptor BD);

/*
4: ViceSetAttr (IN ViceFid Fid,
		IN OUT ViceStatus Status,
		IN RPC2_Integer Mask,
		IN RPC2_Unsigned PrimaryHost,
		IN ViceStoreId StoreId,
		IN RPC2_CountedBS OldVS,
		OUT RPC2_Integer NewVS,
		OUT CallBackStatus VCBStatus,
		IN RPC2_CountedBS PiggyCOP2);
*/

5: ViceSetACL (IN ViceFid Fid,
	       IN RPC2_CountedBS AccessList,
	       IN OUT ViceStatus Status,
	       IN RPC2_Unsigned PrimaryHost,
	       IN ViceStoreId StoreId,
	       IN RPC2_CountedBS OldVS,
	       OUT RPC2_Integer NewVS,
	       OUT CallBackStatus VCBStatus,
	       IN RPC2_CountedBS PiggyCOP2);

/*
6: ViceStore (IN ViceFid Fid,
	      IN OUT ViceStatus Status,
	      IN RPC2_Integer Length,
	      IN RPC2_Unsigned PrimaryHost,
	      IN ViceStoreId StoreId,
	      IN RPC2_CountedBS OldVS,
	      OUT RPC2_Integer NewVS,
	      OUT CallBackStatus VCBStatus,
	      IN RPC2_CountedBS PiggyCOP2,
	      IN OUT SE_Descriptor BD);
*/

15: ViceGetRootVolume (IN OUT RPC2_BoundedBS Volume);

16: ViceSetRootVolume (IN RPC2_String Volume);

17: ViceGetVolumeStatus (IN VolumeId Vid,
			 OUT VolumeStatus Status,
			 IN OUT RPC2_BoundedBS Name,
			 IN OUT RPC2_BoundedBS OfflineMsg,
			 IN OUT RPC2_BoundedBS MOTD,
			 IN RPC2_Unsigned PrimaryHost);

18: ViceSetVolumeStatus (IN VolumeId Vid,
			 IN OUT VolumeStatus Status,
			 IN OUT RPC2_BoundedBS Name,
			 IN OUT RPC2_BoundedBS OfflineMsg,
			 IN OUT RPC2_BoundedBS MOTD,
			 IN RPC2_Unsigned PrimaryHost,
			 IN ViceStoreId StoreId,
			 IN RPC2_CountedBS PiggyCOP2);
	
19: ViceDisconnectFS ();

20: ViceGetTime	(OUT RPC2_Unsigned Seconds,
		 OUT RPC2_Integer USeconds);

21: TokenExpired ();

22: ViceGetOldStatistics (IN OUT ViceStatistics Statistics);

23: ViceGetStatistics (OUT ViceStatistics Statistics);

24: ViceGetVolumeInfo (IN RPC2_String Vid,
		       OUT VolumeInfo Info);

26: ViceGetVolumeLocation (IN VolumeId Vid, OUT RPC2_BoundedBS HostPort);

29: ViceCOP2 (IN RPC2_CountedBS COP2BS);

30: ViceResolve	(IN ViceFid Fid);

33: ViceRepair (IN ViceFid Fid,
		IN OUT ViceStatus status, 
		IN ViceStoreId StoreId,
		IN OUT SE_Descriptor BD);

34: ViceSetVV (IN ViceFid Fid,
	       IN ViceVersionVector VV,
	       IN RPC2_CountedBS PiggyCOP2);

37: ViceAllocFids (IN VolumeId Vid,
		   IN ViceDataType Type,
		   IN OUT ViceFidRange Range,
		   IN RPC2_Unsigned AllocHost,
		   IN RPC2_CountedBS PiggyCOP2);

/* Obsolete: replace with ViceValidateAttrsPlusSHA() (Satya, 12/02) */

38: ViceValidateAttrs (IN RPC2_Unsigned PrimaryHost,
		       IN ViceFid PrimaryFid,
		       IN OUT ViceStatus PrimaryStatus,
		       IN ViceFidAndVV Piggies[], 
		       IN OUT RPC2_BoundedBS VFlagBS,
		       IN RPC2_CountedBS PiggyCOP2);

40: ViceNewConnectFS (IN RPC2_Unsigned ViceVersion,
		      IN ViceClient ClientId);

41: ViceGetVolVS (IN VolumeId Vid,
		  OUT RPC2_Integer VS,
		  OUT CallBackStatus CBStatus);

42: ViceValidateVols (IN ViceVolumeIdStruct Vids[],
		      IN RPC2_CountedBS VS,
		      IN OUT RPC2_BoundedBS VFlagBS);

/* new update calls */
/*
45: ViceVRemove	(IN ViceFid Did,
		 IN RPC2_String Name,
		 IN OUT ViceStatus DirStatus,
		 IN OUT ViceStatus Status,
		 IN RPC2_Unsigned PrimaryHost,
		 IN ViceStoreId StoreId,
		 IN RPC2_CountedBS OldVS,
		 OUT RPC2_Integer NewVS,
		 OUT CallBackStatus VCBStatus,
		 IN RPC2_CountedBS PiggyCOP2);

46: ViceVCreate	(IN ViceFid Did,
		 IN ViceFid BidFid,
		 IN RPC2_String Name,
		 IN OUT ViceStatus Status,
		 IN OUT ViceFid Fid,
		 IN OUT ViceStatus DirStatus,
		 IN RPC2_Unsigned PrimaryHost,
		 IN ViceStoreId StoreId,
		 IN RPC2_CountedBS OldVS,
		 OUT RPC2_Integer NewVS,
		 OUT CallBackStatus VCBStatus,
		 IN RPC2_CountedBS PiggyCOP2);
		 
47: ViceVRename	(IN ViceFid OldDid,
		 IN RPC2_String OldName,
		 IN ViceFid NewDid,
		 IN RPC2_String NewName,
		 IN OUT ViceStatus OldDirStatus,
		 IN OUT ViceStatus NewDirStatus,
		 IN OUT ViceStatus SrcStatus,
		 IN OUT ViceStatus TgtStatus,
		 IN RPC2_Unsigned PrimaryHost,
		 IN ViceStoreId StoreId,
		 IN RPC2_CountedBS OldVS,
		 OUT RPC2_Integer NewVS,
		 OUT CallBackStatus VCBStatus,
		 IN RPC2_CountedBS PiggyCOP2);

48: ViceVSymLink (IN ViceFid Did,
		  IN RPC2_String OldName,
		  IN RPC2_String NewName,
		  IN OUT ViceFid Fid,
		  IN OUT ViceStatus Status,
		  IN OUT ViceStatus DirStatus,
		  IN RPC2_Unsigned PrimaryHost,
		  IN ViceStoreId StoreId,
		  IN RPC2_CountedBS OldVS,
		  OUT RPC2_Integer NewVS,
		  OUT CallBackStatus VCBStatus,
		  IN RPC2_CountedBS PiggyCOP2);

49: ViceVLink (IN ViceFid Did,
	       IN RPC2_String Name,
	       IN ViceFid Fid,
	       IN OUT ViceStatus Status,
	       IN OUT ViceStatus DirStatus,
	       IN RPC2_Unsigned PrimaryHost,
	       IN ViceStoreId StoreId,
	       IN RPC2_CountedBS OldVS,
	       OUT RPC2_Integer NewVS,
	       OUT CallBackStatus VCBStatus,
	       IN RPC2_CountedBS PiggyCOP2);

50: ViceVMakeDir (IN ViceFid Did,
		  IN RPC2_String Name,
		  IN OUT ViceStatus Status,
		  IN OUT ViceFid NewDid,
		  IN OUT ViceStatus DirStatus,
		  IN RPC2_Unsigned PrimaryHost,
		  IN ViceStoreId StoreId,
		  IN RPC2_CountedBS OldVS,
		  OUT RPC2_Integer NewVS,
		  OUT CallBackStatus VCBStatus,
		  IN RPC2_CountedBS PiggyCOP2);
		 
51: ViceVRemoveDir (IN ViceFid Did,
		    IN RPC2_String Name,
		    IN OUT ViceStatus Status,
		    IN OUT ViceStatus TgtStatus,
		    IN RPC2_Unsigned PrimaryHost,
		    IN ViceStoreId StoreId,
		    IN RPC2_CountedBS OldVS,
		    OUT RPC2_Integer NewVS,
		    OUT CallBackStatus VCBStatus,
		    IN RPC2_CountedBS PiggyCOP2);
*/

55: ViceOpenReintHandle	(IN ViceFid Fid,
			 OUT ViceReintHandle RHandle);

56: ViceQueryReintHandle (IN VolumeId Vid,
			  IN ViceReintHandle RHandle,
			  OUT RPC2_Unsigned Length);

57: ViceSendReintFragment (IN VolumeId Vid,
			   IN ViceReintHandle RHandle,
			   IN RPC2_Unsigned Length,
			   IN OUT SE_Descriptor BD);

58: ViceCloseReintHandle (IN VolumeId Vid,
			  IN RPC2_Integer LogSize,
			  IN ViceReintHandle RHandle,
			  IN RPC2_CountedBS OldVS,
			  OUT RPC2_Integer NewVS,
			  OUT CallBackStatus VCBStatus,
			  IN RPC2_CountedBS PiggyCOP2,
			  IN OUT SE_Descriptor BD);

59: ViceReintegrate (IN VolumeId Vid,
		     IN RPC2_Integer LogSize,
		     OUT RPC2_Integer Index,
		     IN RPC2_Integer OutOfOrder,
		     OUT ViceFid StaleDirs[],
		     IN RPC2_CountedBS OldVS,
		     OUT RPC2_Integer NewVS,
		     OUT CallBackStatus VCBStatus,
		     IN RPC2_CountedBS PiggyCOP2,
		     IN OUT SE_Descriptor BD);

/* 60: ViceGetWBPermit (IN VolumeId Vid, IN ViceFid Fid, OUT RPC2_Integer Permit); */

/* 61: ViceTossWBPermit (IN VolumeId Vid, IN ViceFid Fid); */

/* 62: ViceRejectWBPermit (IN VolumeId Vid); */


/* ViceGetAttrPlusSHA() should completely replace ViceGetAttr().
   If SHAVal->MaxSeqLen is non-zero, server returns SHA value (if known) in
   SHAval. A server can always return a SHAval value of zero (or set
   SHAval->SeqLen to 0) if it can't/won't compute/obtain the SHA of the
   object.

   Note: SHAval should really just be a simple 20-byte OUT array;
   it is a BoundedBS of IN OUT mode only because rp2gen packing/unpacking
   is flaky for arrays and I don't have the time to fix it.
   
(Satya 12/02) */

63: ViceGetAttrPlusSHA (IN ViceFid Fid,
		 IN RPC2_Unsigned InconOK,
		 OUT ViceStatus Status,
		 OUT RPC2_BoundedBS SHAval,
		 IN RPC2_Unsigned PrimaryHost,
		 IN RPC2_CountedBS PiggyCOP2);


/* Same comments as for ViceGetAttrPlusSHA() above */

64: ViceValidateAttrsPlusSHA (IN RPC2_Unsigned PrimaryHost,
		       IN ViceFid PrimaryFid,
		       IN OUT ViceStatus PrimaryStatus,
		       OUT RPC2_BoundedBS SHAval,
		       IN ViceFidAndVV Piggies[], 
		       IN OUT RPC2_BoundedBS VFlagBS,
		       IN RPC2_CountedBS PiggyCOP2);

